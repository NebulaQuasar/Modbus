/****************************************************************************/
/*!-  File Name: Modbus.h
 ****************************************************************************/

#ifndef MODBUS_H
#define MODBUS_H

#include <stdint.h>

/*****************************************************************************
**  GLOBAL DEFINITIONS
*****************************************************************************/

#define TRUE                        1
#define FALSE                       0
#define ON                          1
#define OFF                         0
#define MASTER                      0

typedef unsigned char               Bool;

#define MODBUS_MAX_ADU_LENGTH       256
#define MODBUS_MAX_PDU_LENGTH       253

#define MSB1                        0x80
#define NULL                        __null

/* Table of CRC values for high–order byte */
static unsigned char auchCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* Table of CRC values for low–order byte */
static char auchCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};




//!-  The DataTypes defined in the MODBUS Protocol.

typedef uint8_t                     Coils;
typedef uint8_t                     Discrete_Input;
typedef uint16_t                    Input_Registers;
typedef uint16_t                    Holding_Registers;

typedef enum
{
    Baudrate4800 = 0,
    Baudrate9600,
    Baudrate14400,
    Baudrate19200,
    Baudrate38400,
    Baudrate57600,
    Baudrate115200,
    Baudrate128000,
    Baudrate256000,
    BaudrateNone,
} BaudRate;

typedef enum
{
    NoneParity = 0,
    ODDParity,
    EvenParity,
} Parity;

typedef struct{

    BaudRate           baud;
    Parity             parity;

}   RTU_Config;

/*
 *!-  The Below "Modbus_Data" Structure has all
 *!-  the DataTypes Supported by MODBUS.
 *!-  The Values in Member can be set as per
 *!-  the Device Requirements.
 */

typedef struct{
    Coils               Coil;
    Discrete_Input      DInput;
    Input_Registers     IRegister[10];
    Holding_Registers   HRegister;
}   Modbus_Data;

/*
 *!-  Device_ID:
 *!-  Valid slave device addresses are in
 *!-  the range of 0 – 247 decimal. Address 0 is used for
 *!-  the broadcast address, which all slave devices Recognise.
 *!-  Address:
 *!-  The Address of the First Register (2 bytes).
 *!-  Registers_Quantity:
 *!-  The Number of Registers to Read (2 bytes).
 *!-  Byte_Count:
 *!-  The Number of Bytes of DATA in the response (1 byte).
 *!-  Holding_Register:
 *!-  A Sequence of Bytes that contains the values of Holding Registers
 *!-  (2 bytes per register).
 *!-
 */

typedef struct {
    uint8_t     Device_ID;
    uint8_t     Function_Code;
    uint8_t     Subfunction_Code;
    uint8_t     Address_Hi;
    uint8_t     Address_Low;
    uint8_t     Registers_Quantity_Hi;
    uint8_t     Registers_Quantity_Low;
    uint8_t     Byte_Count;
    Modbus_Data Holding_Register;
    uint16_t    CRC_Check;
} Modbus_Packet;

typedef enum {
    Fun_Code00  =   00,      //!- Invalid Function Code

    //!- Class 0 Codes
    Fun_Code03  =   03,      //!- Read Multiple/Holding Registers
    Fun_Code16  =   16,      //!- Write Multiple Registers

    //!- Class 1 Codes
    Fun_Code01  =   01,      //!- Read Coils Status
    Fun_Code02  =   02,      //!- Read Discrete Inputs Status
    Fun_Code04  =   04,      //!- Read Input Registers
    Fun_Code05  =   05,      //!- Write Single Coil
    Fun_Code06  =   06,      //!- Write Single Register
    Fun_Code07  =   07,      //!- Read Exception Status (serial-only)

    //!- Class 2 Codes
    Fun_Code24  =   24,      //!- Read FIFO
    Fun_Code23  =   23,      //!- Read/Write Multiple Registers
    Fun_Code22  =   22,      //!- Mask Write Register
    Fun_Code21  =   21,      //!- Write File Record
    Fun_Code20  =   20,      //!- Read File Record
    Fun_Code15  =   15       //!- Write Multiple Coils
}   Funct_Code;



typedef enum {
    ILLEGAL_FUNCTION                =   0x01,
    ILLEGAL_DATA_ADDRESS            =   0x02,
    ILLEGAL_DATA_VALUE              =   0x03,
    SLAVE_DEVICE_FAILURE            =   0x04,
    ACKNOWLEDGE                     =   0x05,
    SLAVE_DEVICE_BUSY               =   0x06,
    MEMORY_PARITY_ERROR             =   0x08,
    GATEWAY_PATH_UNAVAILABLE        =   0x0A,
    TARGET_DEVICE_FAILED_TO_RESPOND =   0x0B
}   Modbus_Exception_Code;



typedef struct Configuration{
/*
 *!-  Configuration required to Establish Connection.
 */
}   RTU_Config;



/*****************************************************************************
**  GLOBAL FUNCTIONS
*****************************************************************************/

Bool Modbus_Init(
        void);

void Modbus_Main(
        void);

Bool Setup_RTU_Connection(
        RTU_Config *const ConfigPtr);

Bool Validate_Function_Code(
        const uint8_t FunctionCode);

uint8_t Get_Exception_FunctCode(
        const uint8_t FunctionCode);

uint16_t Calculate_CRC16(
        unsigned char *MsgBuffer,
        uint16_t DataLength);

void Set_Device_ID(
        uint8_t DevID);

Bool Set_Function_Code(
        uint8_t UsrFunctCode);

void Clear_Frame(
        Modbus_Packet *const FramePtr);

uint8_t Get_Byte_Counts(
        const uint8_t FunctionCode,
        const uint16_t RegistersQuantity);

void Modbus_Request(
        void);

void Modbus_Response(
        void);

void Setup_RTU_Connection(/*parameters*/);



/* Each request from a master can perform a single operation on a
 * single bank of data. 
 * That is, a single request can read from the coils bank or write to the
 * coils bank, but not both. 
 * There are exceptions, however. For example, function code 23 allows
 * a master to write holding registers and read holding registers in a
 * single request/response cycle. 
 * However, this is not a commonly implemented function code. 
 * Both master and slave device documentation should be checked to
 * verify whether this function code is available.
 */


#endif  /* MODBUS_H */






